diff --git a/node_modules/@greenwood/cli/src/config/rollup.config.js b/node_modules/@greenwood/cli/src/config/rollup.config.js
index ae49d05..bc91474 100644
--- a/node_modules/@greenwood/cli/src/config/rollup.config.js
+++ b/node_modules/@greenwood/cli/src/config/rollup.config.js
@@ -180,6 +180,63 @@ function greenwoodSyncSsrEntryPointsOutputPaths(compilation) {
   };
 }
 
+// TODO needed for SSR pages too?
+// TODO will this work for Import Meta URL linking too?
+// function getAllBundleChunks(key, bundles) {
+//   const chunks = [];
+
+//   // impmorts
+//   // dynamic imports
+//   for(const bundle in bundles) {
+//     const { fileName } = bundles[bundle];
+//     if(fileName !== key && fileName.startsWith(key.replace('.js', ''))) {
+//       chunks.push(bundles[bundle].fileName)
+//     }
+//   }
+
+//   return chunks;
+// }
+
+// function greenwoodSyncApiRoutesOutputPath(compilation) {
+//   return {
+//     name: "greenwood-sync-api-routes-output-paths",
+//     generateBundle(options, bundle) {
+//       const { basePath } = compilation.config;
+//       const { apisDir, outputDir } = compilation.context;
+//       const assetMapper = {};
+
+//       // map rollup bundle names back to original API routes for syncing input <> output bundle names in the manifest
+//       Object.keys(bundle).forEach((key) => {
+//         if (bundle[key].exports?.find((exp) => exp === "handler")) {
+//           const ext = bundle[key].facadeModuleId.split(".").pop();
+//           const relativeFacade = new URL(`file://${bundle[key].facadeModuleId}`).pathname
+//             .replace(apisDir.pathname, `${basePath}/`)
+//             .replace(`.${ext}`, "");
+//           const route = `/api${relativeFacade}`;
+
+//           if (compilation.manifest.apis.has(route)) {
+//             // console.log('???????', bundle[key])
+//             // console.log('11111', bundle[key].imports);
+//             // console.log('22222', bundle[key].modules);
+//             const api = compilation.manifest.apis.get(route);
+//             const linkedAssets = getAllBundleChunks(key, bundle).map(chunk => new URL(`./api/${chunk}`, outputDir).href);
+
+//             compilation.manifest.apis.set(route, {
+//               ...api,
+//               outputHref: new URL(`./api/${key}`, outputDir).href,
+//               assets: api.assets
+//                 ? [...api.assets, ...linkedAssets]
+//                 : linkedAssets
+//             });
+//           }
+//         } else {
+//           // console.log('NONONON', bundle[key])
+//         }
+//       });
+//     },
+//   };
+// }
+
 function greenwoodSyncApiRoutesOutputPath(compilation) {
   return {
     name: "greenwood-sync-api-routes-output-paths",
@@ -726,12 +783,14 @@ const getRollupConfigForApiRoutes = async (compilation) => {
       return { id, inputPath: normalizePathnameForWindows(new URL(pageHref)) };
     })
     .map(({ id, inputPath }) => {
+      console.log({ id, inputPath });
       return {
         input: inputPath,
         output: {
-          dir: `${normalizePathnameForWindows(outputDir)}/api`,
-          entryFileNames: `${id}.js`,
-          chunkFileNames: `${id}.[hash].js`,
+          file: `${normalizePathnameForWindows(outputDir)}/api/${id}.js`,
+          inlineDynamicImports: true,
+          // entryFileNames: `${id}.js`,
+          // chunkFileNames: `${id}.[hash].js`,
         },
         plugins: [
           greenwoodResourceLoader(compilation),
