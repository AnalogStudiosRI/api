diff --git a/node_modules/@greenwood/cli/src/config/rollup.config.js b/node_modules/@greenwood/cli/src/config/rollup.config.js
index 585f7de..1dc8b57 100644
--- a/node_modules/@greenwood/cli/src/config/rollup.config.js
+++ b/node_modules/@greenwood/cli/src/config/rollup.config.js
@@ -31,7 +31,8 @@ function greenwoodResourceLoader (compilation, browser = false) {
 
       // check for non bare paths and resolve them to the user's workspace
       // or Greenwood's scratch dir, like when bundling inline <script> tags
-      if (normalizedId.startsWith('.')) {
+      if (normalizedId.startsWith('.') && !normalizedId.endsWith('/')) {
+        // console.log('resolveId', { id, normalizedId });
         const importerUrl = new URL(normalizedId, `file://${importer}`);
         const type = options.attributes?.type ?? '';
         // if we are polyfilling import attributes for the browser we will want Rollup to bundles these as JS files
@@ -632,6 +633,7 @@ const getRollupConfigForBrowserScripts = async (compilation) => {
 };
 
 const getRollupConfigForApiRoutes = async (compilation) => {
+  // console.log('getRollupConfigForApiRoutes', compilation.manifest.apis.values())
   const { outputDir } = compilation.context;
 
   return [...compilation.manifest.apis.values()]
diff --git a/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js b/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js
index 1abad09..b41fd87 100644
--- a/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js
+++ b/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js
@@ -8,7 +8,9 @@ const importMap = {};
 const diagnostics = {};
 
 function updateImportMap(key, value, resolvedRoot) {
+  // console.log('updateImportMap???', { key, value });
   if (!importMap[key.replace('./', '')]) {
+    // console.log('updateImportMap >>>', key, `${IMPORT_MAP_RESOLVED_PREFIX}${resolvedRoot.replace('file://', '')}${value.replace('./', '')}`)
     importMap[key.replace('./', '')] = `${IMPORT_MAP_RESOLVED_PREFIX}${resolvedRoot.replace('file://', '')}${value.replace('./', '')}`;
   }
 }
@@ -66,7 +68,12 @@ function derivePackageRoot(resolved) {
     root = root.replace(`${segment}/`, '');
   }
 
-  return root;
+  // console.log('derivePackageRoot', { resolved, root });
+  // console.log('--------------------------------------')
+
+  return root !== ''
+    ? root
+    : null;
 }
 
 // Helper function to convert export patterns to a regex (thanks ChatGPT :D)
@@ -210,32 +217,41 @@ async function walkPackageForExports(dependency, packageJson, resolvedRoot) {
   }
 }
 
+const parents = {};
+
 // https://nodejs.org/api/packages.html#package-entry-points
-async function walkPackageJson(packageJson = {}) {
+async function walkPackageJson(packageJson = {}, parent) {
   try {
-    for (const dependency of Object.keys(packageJson.dependencies || {})) {
+    // console.log('walkPackageJson', { parent, packageJson });
+    const dependencies = Object.keys(packageJson.dependencies || {});
+
+    for (const dependency of dependencies) {
+      // console.log('######', { dependency })
       const resolved = resolveBareSpecifier(dependency);
 
       if (resolved) {
+        // console.log('parent resolve >>>', { dependency, resolved });
         const resolvedRoot = derivePackageRoot(resolved);
-        const resolvedPackageJson = (await import(new URL('./package.json', resolvedRoot), { with: { type: 'json' } })).default;
 
-        walkPackageForExports(dependency, resolvedPackageJson, resolvedRoot);
+        if (resolvedRoot) {
+          // console.log({ resolvedRoot });
+          const resolvedPackageJson = (await import(new URL('./package.json', resolvedRoot), { with: { type: 'json' } })).default;
 
-        if (resolvedPackageJson.dependencies) {
-          for (const dependency in resolvedPackageJson.dependencies) {
-            const resolved = resolveBareSpecifier(dependency);
+          walkPackageForExports(dependency, resolvedPackageJson, resolvedRoot);
 
-            if (resolved) {
-              const resolvedRoot = derivePackageRoot(resolved);
-              const resolvedPackageJson = (await import(new URL('./package.json', resolvedRoot), { with: { type: 'json' } })).default;
-
-              walkPackageForExports(dependency, resolvedPackageJson, resolvedRoot);
-
-              await walkPackageJson(resolvedPackageJson);
-            }
+          if (!parents[`${resolvedPackageJson.name}-${resolvedPackageJson.version}`]) {
+            parents[`${resolvedPackageJson.name}-${resolvedPackageJson.version}`] = true;
+            await walkPackageJson(resolvedPackageJson, dependency);
           }
+        } else {
+          // TODO add to diagnostics
+          console.log('NO DERIVED PACKAGE ROOT', { resolvedRoot })
+          console.log('--------------------------------------')
         }
+      } else {
+        // TODO add to diagnostics
+        console.log('NO RESOLVED 111????', { dependency })
+        console.log('--------------------------------------')
       }
     }
   } catch (e) {
