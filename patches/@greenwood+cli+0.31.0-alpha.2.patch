diff --git a/node_modules/@greenwood/cli/src/config/rollup.config.js b/node_modules/@greenwood/cli/src/config/rollup.config.js
index 585f7de..04dec5e 100644
--- a/node_modules/@greenwood/cli/src/config/rollup.config.js
+++ b/node_modules/@greenwood/cli/src/config/rollup.config.js
@@ -31,7 +31,8 @@ function greenwoodResourceLoader (compilation, browser = false) {
 
       // check for non bare paths and resolve them to the user's workspace
       // or Greenwood's scratch dir, like when bundling inline <script> tags
-      if (normalizedId.startsWith('.')) {
+      if (normalizedId.startsWith('.') && importer.startsWith(userWorkspace.pathname)) {
+        console.log({ id, importer, normalizedId });
         const importerUrl = new URL(normalizedId, `file://${importer}`);
         const type = options.attributes?.type ?? '';
         // if we are polyfilling import attributes for the browser we will want Rollup to bundles these as JS files
@@ -632,6 +633,7 @@ const getRollupConfigForBrowserScripts = async (compilation) => {
 };
 
 const getRollupConfigForApiRoutes = async (compilation) => {
+  // console.log('getRollupConfigForApiRoutes', compilation.manifest.apis.values())
   const { outputDir } = compilation.context;
 
   return [...compilation.manifest.apis.values()]
diff --git a/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js b/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js
index 1abad09..e1ab7d5 100644
--- a/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js
+++ b/node_modules/@greenwood/cli/src/lib/walker-package-ranger.js
@@ -1,4 +1,5 @@
 import fs from 'fs';
+import { isBuiltin } from 'node:module';
 
 /* eslint-disable max-depth,complexity */
 // priority if from L -> R
@@ -8,7 +9,9 @@ const importMap = {};
 const diagnostics = {};
 
 function updateImportMap(key, value, resolvedRoot) {
+  // console.log('updateImportMap???', { key, value });
   if (!importMap[key.replace('./', '')]) {
+    // console.log('updateImportMap >>>', key, `${IMPORT_MAP_RESOLVED_PREFIX}${resolvedRoot.replace('file://', '')}${value.replace('./', '')}`)
     importMap[key.replace('./', '')] = `${IMPORT_MAP_RESOLVED_PREFIX}${resolvedRoot.replace('file://', '')}${value.replace('./', '')}`;
   }
 }
@@ -23,7 +26,10 @@ function resolveBareSpecifier(specifier) {
   try {
     resolvedPath = import.meta.resolve(specifier);
   } catch (e) {
-    diagnostics[specifier] = `ERROR (${e.code}): unable to resolve specifier => \`${specifier}\` \n${e.message}`;
+    if (e.code === 'XXX') {
+      return;
+    }
+    diagnostics[specifier] = `WARNING (${e.code}): unable to resolve specifier => \`${specifier}\` \n${e.message}`;
   }
 
   return resolvedPath;
@@ -63,10 +69,13 @@ function derivePackageRoot(resolved) {
       }
     }
 
-    root = root.replace(`${segment}/`, '');
+    // root = root.replace(`${segment}/`, '');
+    root = root.substring(0, root.lastIndexOf(segment))
   }
 
-  return root;
+  return root !== ''
+    ? root
+    : null;
 }
 
 // Helper function to convert export patterns to a regex (thanks ChatGPT :D)
@@ -210,30 +219,39 @@ async function walkPackageForExports(dependency, packageJson, resolvedRoot) {
   }
 }
 
+const parents = {};
+
 // https://nodejs.org/api/packages.html#package-entry-points
 async function walkPackageJson(packageJson = {}) {
   try {
-    for (const dependency of Object.keys(packageJson.dependencies || {})) {
+    // console.log('walkPackageJson', { parent, packageJson });
+    const dependencies = Object.keys(packageJson.dependencies || {});
+
+    for (const dependency of dependencies) {
+      // console.log('######', { dependency })
       const resolved = resolveBareSpecifier(dependency);
 
       if (resolved) {
+        // console.log('parent resolve >>>', { dependency, resolved });
         const resolvedRoot = derivePackageRoot(resolved);
-        const resolvedPackageJson = (await import(new URL('./package.json', resolvedRoot), { with: { type: 'json' } })).default;
 
-        walkPackageForExports(dependency, resolvedPackageJson, resolvedRoot);
+        if (resolvedRoot) {
+          // console.log({ resolvedRoot });
+          const resolvedPackageJson = (await import(new URL('./package.json', resolvedRoot), { with: { type: 'json' } })).default;
 
-        if (resolvedPackageJson.dependencies) {
-          for (const dependency in resolvedPackageJson.dependencies) {
-            const resolved = resolveBareSpecifier(dependency);
+          walkPackageForExports(dependency, resolvedPackageJson, resolvedRoot);
 
-            if (resolved) {
-              const resolvedRoot = derivePackageRoot(resolved);
-              const resolvedPackageJson = (await import(new URL('./package.json', resolvedRoot), { with: { type: 'json' } })).default;
-
-              walkPackageForExports(dependency, resolvedPackageJson, resolvedRoot);
+          if (!parents[resolvedPackageJson.name]) {
+            parents[resolvedPackageJson.name] = true;
+            await walkPackageJson(resolvedPackageJson, dependency);
+          }
+        } else {
+          // console.log({ resolved });
+          // console.log('isBuilt-in ????', isBuiltin(resolved));
 
-              await walkPackageJson(resolvedPackageJson);
-            }
+          // https://github.com/nodejs/node/issues/56652#issuecomment-2599803744
+          if (!isBuiltin(resolved)) {
+            diagnostics[dependency] = `WARNING: No package.json resolved for => \`${dependency}\`, resolved to \`${resolved}\``;
           }
         }
       }
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-node-modules.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-node-modules.js
index ff22e43..f32fb06 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-node-modules.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-node-modules.js
@@ -83,9 +83,9 @@ class NodeModulesResource extends ResourceInterface {
       if (Object.keys(diagnostics).length > 0) {
         console.log('****************************************************************************');
         Object.keys(diagnostics).forEach((diagnostic) => {
-          console.warn(diagnostics[diagnostic]);
+          console.warn(`- ${diagnostics[diagnostic]}\n`);
         });
-        console.log('Learn more about these warnings at => https://greenwoodjs.dev/docs/introduction/web-standards/#import-maps');
+        console.log('>>> Learn more about these warnings at https://greenwoodjs.dev/docs/introduction/web-standards/#import-maps <<<');
         console.log('****************************************************************************');
       }
 
